#!/usr/bin/env python

import sys
import argparse
from bondpy import bondpy
from diagnostic_msgs.srv import AddDiagnostics
import rosparam
import rospy

class AddAnalyzers:

    def __init__(self, args):
        self.bond = None
        self.add_diagnostics = None
        self.name = rospy.get_name()
        self.namespace = None
        self.add_analyzers(args)
        rospy.on_shutdown(self.remove_group)

    def remove_group(self):
        if self.add_diagnostics is None:
            return;

        # unload the analyzers
        try:
            # this will reverse the load if it is loaded on the other side
            resp = self.add_diagnostics(load_namespace=self.namespace)
            if resp.success:
                rospy.loginfo('Add Analyzers: successfully removed analyzers from the diagnostic aggregator [{0}]'.format(self.name))
            else:
                rospy.logerr('Add Analyzers: failed to remove analyzers on the diagnostic aggregator [{0}][{1}]'.format(self.name, resp.message))
        except rospy.service.ServiceException:
            rospy.logerr('Add Analyzers: unloading service returned failure [{0}]'.format(self.name))
        except rospy.ROSException:
            rospy.logerr('Add Analyzers: add timed out while waiting for diagnostics_agg service, or ROS shutdown [{0}]'.format(self.name))

        # Cannot rely on bonds to get a message across if parts of ros are shutting down
        #       https://github.com/ros/bond_core/issues/14
        #
        # if self.bond:
        #    self.bond.shutdown()


    def add_analyzers(self, myargv):
        usage = """
        allows you to dynamically add a group to the diagnostic aggregator,
        which is automatically removed when this node dies. Analyzer configurations
        can either be provided directly, or assumed that they are already can be
        found on the ros parameter server (where roslaunch may have loaded them).
        """
        parser = argparse.ArgumentParser(description=usage)
        parser.add_argument('analyzer_yaml', nargs='?', default=None)
        parser.add_argument('-t', '--timeout', type=float, dest='timeout', default=None, help='time in seconds to wait for the diagnostic_agg service to come up before timing out. Default waits indefinitely')
        args = parser.parse_args(myargv[1:])

        self.namespace = rospy.resolve_name(rospy.get_name())

        if args.analyzer_yaml is None:
            # nothing to do - it will assume parameters are already loaded on
            # the parameter server (usually via roslaunch)
            pass
        else:
            paramlist = rosparam.load_file(args.analyzer_yaml, default_namespace=namespace)
            for params, ns in paramlist:
                rosparam.upload_params(ns, params)

        self.bond = bondpy.Bond("/diagnostics_agg/bond", self.namespace)

        try:
            rospy.wait_for_service('/diagnostics_agg/add_diagnostics', timeout=args.timeout)
            self.add_diagnostics = rospy.ServiceProxy('/diagnostics_agg/add_diagnostics', AddDiagnostics)
            resp = self.add_diagnostics(load_namespace=self.namespace)
            if resp.success:
                rospy.loginfo('Add Analyzers: successfully added analyzers to diagnostic aggregator [{0}]'.format(self.name))
                self.bond.start()
            else:
                rospy.logerr('Add Analyzers: did not add any analyzers to diagnostic aggregator [{0}][{1}]'.format(self.name, resp.message))
                rospy.signal_shutdown('')
        except rospy.service.ServiceException:
            rospy.logerr('Add Analyzers: service returned failure - missing aggregator or failed init of analyzer group? [{0}]'.format(self.name))
            rospy.signal_shutdown('')
        except rospy.ROSException:
            rospy.logerr('Add Analyzers: add timed out while waiting for diagnostics_agg service, or ROS shutdown [{0}]'.format(self.name))
            rospy.signal_shutdown('')

if __name__ == '__main__':
    rospy.init_node('add_analyzers')
    AddAnalyzers(rospy.myargv())
    rospy.spin()
